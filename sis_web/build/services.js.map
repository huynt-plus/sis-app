{"version":3,"sources":["checkboxservice.ts","models.ts","reportservice.ts","common.ts","logger.ts","authentication/inlpuserinfo.ts","clientpersistentstorage/nlpclientpersistentstorage.ts","authentication/nlpuser.ts","authentication/accessdeniedinterceptor.ts","clientpersistentstorage/nlpclientpersistentstorageprovider.ts","exceptionhandling/exceptionhandlerprovider.ts","exceptionhandling/servererrorinterceptor.ts","notifications/notify.ts","module.ts","exceptionhandling/module.ts"],"names":["NLP","NLP.Services","NLP.Services.CheckboxService","NLP.Services.CheckboxService.constructor","NLP.Services.CheckboxService.getCheckboxs","NLP.Services.ReportService","NLP.Services.ReportService.constructor","NLP.Services.ReportService.sendReport","NLP.Common","NLP.Common.Constants","NLP.Common.Constants.constructor","NLP.Common.Events","NLP.Common.Events.constructor","NLP.Common.LegalDocumentType","NLP.Common.URL","NLP.Common.URL.constructor","NLP.Common.LogMessageLevel","NLP.Common.Utility","NLP.Common.Utility.constructor","NLP.Common.Utility.convertLegalDocumentTypeToTitle","NLP.Common.Utility.getDistinctCollection","NLP.Common.Utility.URLparse","NLP.Services.Logger","NLP.Services.Logger.error","NLP.Services.Logger.info","NLP.Services.Logger.success","NLP.Services.Logger.warning","NLP.Services.Authentication","NLP.Services.NLPClientPersistentStorage","NLP.Services.NLPClientPersistentStorage.constructor","NLP.Services.NLPClientPersistentStorage.set","NLP.Services.NLPClientPersistentStorage.get","NLP.Services.NLPClientPersistentStorage.remove","NLP.Services.Authentication.NLPUser","NLP.Services.Authentication.NLPUser.constructor","NLP.Services.Authentication.NLPUser.userInfo","NLP.Services.Authentication.NLPUser.getCurrentUserProfile","NLP.Services.Authentication.NLPUser.isAuthenticated","NLP.Services.Authentication.NLPUser.logout","NLP.Services.Authentication.accessDeniedInterceptor","resetThreshold","NLP.Services.NLPClientPersistentStorageProvider","NLP.Services.NLPClientPersistentStorageProvider.constructor","NLP.Services.NLPClientPersistentStorageProvider.$get","NLP.Services.NLPClientPersistentStorageProvider.setPrefix","NLP.Services.ExceptionHandling","NLP.Services.ExceptionHandling.ExceptionHandlerConfig","NLP.Services.ExceptionHandling.ExceptionHandlerConfig.constructor","NLP.Services.ExceptionHandling.ExceptionHandlerProvider","NLP.Services.ExceptionHandling.ExceptionHandlerProvider.constructor","NLP.Services.ExceptionHandling.ExceptionHandlerProvider.configure","NLP.Services.ExceptionHandling.ExceptionHandlerProvider.$get","NLP.Services.ExceptionHandling.config","NLP.Services.ExceptionHandling.sendToRaygun","NLP.Services.ExceptionHandling.extendExceptionHandler","NLP.Services.ExceptionHandling.serverErrorInterceptor","NLP.Services.Notifications","NLP.Services.Notifications.Notify","NLP.Services.Notifications.Notify.constructor","NLP.Services.Notifications.Notify.set","NLP.Services.Notifications.Notify.dismiss"],"mappings":"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","file":"services.js","sourcesContent":["/// <reference path=\"../data-services/checkboxs/queries/getcheckboxs.ts\" />\nmodule NLP.Services {\n        'use strict';\n\n        export interface ICheckboxService {\n            getCheckboxs();\n        }\n        export class CheckboxService implements ICheckboxService {\n            static $inject: string[] = ['$http', 'API_ENDPOINT_CONFIG'];\n            private urlBase: string;\n\n            constructor(private $http: ng.IHttpService, private API_ENDPOINT_CONFIG) {\n                this.urlBase = API_ENDPOINT_CONFIG.URL + 'checkboxlist/';\n            }\n\n            getCheckboxs() {\n                return this.$http.get<NLP.DataServices.Checkbox.Queries.GetCheckboxs.IModel>(this.urlBase).then(response => response.data);\n            }\n        }\n}\n","module NLP.Services {\n    'use strict';\n\n    export interface IHomeData {\n        Title: number;\n        Id: number;\n    }\n\n    export interface IUserResponse {\n        id: string;\n        name: string;\n        picture: string;\n    }\n\n    export interface IReportSyncResult {\n        messages: string;\n        level: number;\n        hasErrors: boolean;\n        complete: boolean;\n    }\n}","/// <reference path=\"models.ts\" />\nmodule NLP.Services {\n    'use strict';\n\n    export interface IReportService {\n        sendReport(formFile, reportFile): ng.IPromise<NLP.Services.IReportSyncResult>;\n    }\n    export class ReportService implements IReportService {\n        static $inject: string[] = ['$http', 'API_ENDPOINT_CONFIG', 'Upload'];\n        private urlBase: string;\n        // private syncResult: NLP.Services.IReportSyncResult;\n        constructor(private $http: ng.IHttpService, private API_ENDPOINT_CONFIG, private Upload) {\n            this.urlBase = API_ENDPOINT_CONFIG.URL + 'report/';\n        }\n\n        sendReport(formFile, reportFile): ng.IPromise<NLP.Services.IReportSyncResult> {\n            return this.Upload.upload({url: this.urlBase + 'upload', data: { file: reportFile } }).then((response) => {\n                return response.data;\n            });\n        }\n    }\n}\n","module NLP.Common {\n    'use strict';\n\n    export class Constants {\n        public static NLP_REQUESTCANCELLEDLOGININPROGRESS = 'nlp:requestCancelledLoginInProgress';\n        public static EMPTYGUID = '00000000-0000-0000-0000-000000000000';\n    }\n\n    export class Events {\n        public static AUTH0_LOGINSUCCESS = 'loginSuccess';\n        public static AUTH0_LOGINFAILURE = 'loginFailure';\n        public static AUTH0_LOGOUT = 'logout';\n        public static AUTH0_FORBIDDEN = 'forbidden';\n        public static AUTH0_AUTHENTICATED = 'authenticated';\n\n        public static NLP_LOGINSUCCESS = 'nlp:loginSuccess';\n        public static NLP_TOKENREFRESHTIMEDOUT = 'nlp:tokenRefreshTimedOut';\n        public static NLP_REFRESH_TOKEN_WINDOW_OPENED = 'nlp:RefreshTokenWindowOpened';\n        public static UI_ROUTER_STATECHANGEERROR = '$stateChangeError';\n        public static UI_ROUTER_STATECHANGESTART = '$stateChangeStart';\n        public static UI_ROUTER_STATECHANGESUCCESS = '$stateChangeSuccess';\n        public static UI_ROUTERVIEWCONTENTLOADED_SCOPE_EVENT = '$viewContentLoaded';\n    }\n\n    export enum LegalDocumentType {\n        AcceptableUsePolicy,\n        DataConfidentialityAgreement,\n        PrivacyPolicy,\n        ServiceLevelAgreement,\n        TermsOfUse\n    }\n\n    export class URL {\n        href: string;\t\t\t// the full URL\n        protocol: string;\t\t// http:\n        hostname: string;\t\t// site.com\n        port: string;\t\t\t// 81\n        pathname: string;\t\t// /path/page\n        search: string;\t\t\t// ?a=1&b=2\n        hash: string;\t\t\t// #hash\n    }\n\n    export enum LogMessageLevel {\n        Danger = 1,\n        Warning = 2,\n        Info = 3,\n        Muted = 4\n    }\n    export class Utility {\n\n\n        static convertLegalDocumentTypeToTitle(type: LegalDocumentType) {\n            switch (type) {\n                case LegalDocumentType.AcceptableUsePolicy:\n                    return 'Acceptable Use Policy';\n                case LegalDocumentType.DataConfidentialityAgreement:\n                    return 'Data Confidentiality Agreement';\n                case LegalDocumentType.PrivacyPolicy:\n                    return 'Privacy Policy';\n                case LegalDocumentType.ServiceLevelAgreement:\n                    return 'Service Level Agreement';\n                case LegalDocumentType.TermsOfUse:\n                    return 'Terms Of Use';\n                default:\n                    return '';\n            }\n        }\n\n        static getDistinctCollection(collection) {\n            var o = {}, i, l = collection.length, uniqueEntries = [];\n            for (i = 0; i < l; i += 1) {\n                o[collection[i]] = collection[i];\n            }\n            for (i in o) {\n                if (o.hasOwnProperty(i)) {\n                    uniqueEntries.push(o[i]);\n                }\n            }\n            return uniqueEntries;\n        }\n\n        static URLparse(str: string): URL {\n            var url = document.createElement('a');\n            url.href = str;\n            return url;\n        }\n\n        //static normalizeDate(date: Date): moment.Moment {\n          //  return moment.utc((<any>moment.utc({ y: new Date(date.toString()).getFullYear(), M: new Date(date.toString()).getMonth(), d: new Date(date.toString()).getDate() })).parseZone());\n        //}\n    }\n} ","module NLP.Services {\n    'use strict';\n    export interface ILogger {\n        error(message, data, title): void;\n        info(message, data, title): void;\n        success(message, data, title): void;\n        warning(message, data, title): void;\n    }\n\n    export function Logger($log, toastr): ILogger {\n        var service = {\n            showToasts: true,\n\n            error: error,\n            info: info,\n            success: success,\n            warning: warning,\n\n            // straight to console; bypass toastr\n            log: $log.log\n        };\n\n        return service;\n\n        function error(message, data, title) {\n            toastr.error(message, title);\n            $log.error('Error: ' + message, data);\n        }\n\n        function info(message, data, title) {\n            toastr.info(message, title);\n            $log.info('Info: ' + message, data);\n        }\n\n        function success(message, data, title) {\n            toastr.success(message, title);\n            $log.info('Success: ' + message, data);\n        }\n\n        function warning(message, data, title) {\n            toastr.warning(message, title);\n            $log.warn('Warning: ' + message, data);\n        }\n    }\n}","module NLP.Services.Authentication {\n    'use strict';\n\n    export interface INLPUserInfo {\n        isAuthenticated: boolean;\n        userName: string;\n        loginError: string;\n        id: string;\n    }\n}","module NLP.Services {\n    'use strict';\n\n    export class NLPClientPersistentStorage {\n        static $inject: string[] = ['localStorageService'];\n\n        constructor(private localStorageService: angular.local.storage.ILocalStorageService) {\n        }\n\n        set<T>(key: string, value: T): boolean {\n            return this.localStorageService.set<T>(key, value);\n        }\n\n        get<T>(key: string): T {\n            return this.localStorageService.get<T>(key);\n        }\n\n        remove(key: string): boolean {\n            return this.localStorageService.remove(key);\n        }\n    }\n}","/// <reference path=\"../clientpersistentstorage/nlpclientpersistentstorage.ts\" />\n/// <reference path=\"../common.ts\" />\n/// <reference path=\"inlpuserinfo.ts\" />\n/// <reference path=\"../models.ts\" />\n\nmodule NLP.Services.Authentication {\n    'use strict';\n\n    export interface INLPUser {\n        userInfo: INLPUserInfo;\n        isAuthenticated(): boolean;\n        getCurrentUserProfile(): IUserResponse;\n        logout(): void;\n    }\n\n    export class NLPUser implements INLPUser {\n\n        $inject: string[] = ['$q', '$rootScope', '$window', '$modal', 'FacebookService', '$location', 'NLPClientPersistentStorage', '$timeout'];\n\n        nlpUser: NLP.Services.IUserResponse = null;\n\n        NLPId: any;\n\n        constructor(private $q: ng.IQService,\n            private $rootScope,\n            private $window: ng.IWindowService,\n            private $modal,\n            private $location,\n            private NLPClientPersistentStorage: NLP.Services.NLPClientPersistentStorage,\n            private $timeout: ng.ITimeoutService\n        ) {}\n\n        get userInfo(): INLPUserInfo {\n            return this.$rootScope.userInfo;\n        }\n\n        getCurrentUserProfile() {\n            return this.nlpUser;\n        }\n\n\n        isAuthenticated() {\n            return this.$rootScope.userInfo && this.$rootScope.userInfo.isAuthenticated;\n        }\n\n        logout() {\n            this.$rootScope.userInfo = null;\n            this.$location.path('/');\n            this.$window.location.reload();\n        }\n    }\n}","module NLP.Services.Authentication {\n    'use strict';\n    export function accessDeniedInterceptor($q, $rootScope: ng.IRootScopeService, $timeout: ng.ITimeoutService, logger: ILogger) {\n        var messageDisplayed: boolean = false;\n        return {\n            responseError: function (rejection) {\n                if (rejection && rejection.status === 403 && !messageDisplayed) {\n                    // suppress messages from requests that are close in time so that they do not flood UI\n                    messageDisplayed = true;\n                    logger.warning('Sorry, you don\\'t have enough permissions to complete this action.', '', 'Access denied');\n                    // remove the threshold after some time so that the messages start showing up again\n                    $timeout(function resetThreshold() { messageDisplayed = false; }, 1000);\n                }\n                return $q.reject(rejection);\n            }\n        };\n    }\n    accessDeniedInterceptor.$inject = ['$q', '$rootScope', '$timeout', 'logger'];\n}","/// <reference path=\"nlpclientpersistentstorage.ts\" />\n\nmodule NLP.Services {\n    'use strict';\n\n    export class NLPClientPersistentStorageProvider implements ng.IServiceProvider {\n\n        static $inject = ['localStorageServiceProvider'];\n\n        constructor(private localStorageServiceProvider: angular.local.storage.ILocalStorageServiceProvider) {\n            this.$get.$inject = NLPClientPersistentStorage.$inject;\n        }\n\n        $get(localStorageService) {\n            return new NLPClientPersistentStorage(localStorageService);\n        }\n\n        setPrefix(prefix: string): NLPClientPersistentStorageProvider {\n            this.localStorageServiceProvider.setPrefix(prefix);\n            return this;\n        }\n    }\n}","/// <reference path=\"../common.ts\" />\nmodule NLP.Services.ExceptionHandling {\n\t'use strict';\n\n\texport interface IExceptionHandlerProvider extends ng.IServiceProvider {\n\n\t\t$get(): { config: ExceptionHandlerConfig };\n\t}\n\n\texport class ExceptionHandlerConfig {\n\t\tappErrorPrefix: string = '';\n\t}\n\n\t/**\n\t * Configure the exception handling\n\t * @return {[type]}\n\t */\n\texport class ExceptionHandlerProvider implements IExceptionHandlerProvider {\n\t\t/* jshint validthis:true */\n\t\tprivate config: ExceptionHandlerConfig;\n\t\tconstructor() {\n\t\t\t//this.config = new exceptionHandlerConfig();\n\t\t}\n\n\t\tconfigure(appErrorPrefix: string) {\n\t\t\t//this.config.appErrorPrefix = appErrorPrefix;\n\t\t}\n\n\t\t$get(): { config: ExceptionHandlerConfig } {\n\t\t\t//var ret: { config: ExceptionHandlerConfig };\n\t\t\t//ret.config = this.config;\n\n\t\t\treturn { config: this.config };\n\t\t}\n\t}\n\n\t/**\n\t * Configure by setting an optional string value for appErrorPrefix.\n\t * Accessible via config.appErrorPrefix (via config value).\n\t * @param  {[type]} $provide\n\t * @return {[type]}\n\t * @ngInject\n\t */\n\texport function config($provide, $httpProvider) {\n        $provide.decorator('$exceptionHandler', extendExceptionHandler);\n\n        if ($httpProvider && $httpProvider.interceptors) {\n            $httpProvider.interceptors.push('serverErrorInterceptor');\n        }\n    }\n\n\n    declare var Raygun: raygun.RaygunStatic;\n\n    function sendToRaygun(exception, cause) {\n        var error = exception;\n        var errorTags: string[] = [];\n        var customData: { cause: any; serverStackTrace?: any; config?: any; } = { cause: cause };\n        if (exception.data && exception.data.message && exception.data.stackTrace) {\n            error = new Error(exception.data.message + ': ' + exception.statusText);\n            customData.serverStackTrace = exception.data.stackTrace;\n            errorTags.push(exception.statusText);\n        }\n\n        if (exception.config) {\n            customData.config = exception.config;\n\n            // build tags for the error\n            if (exception.config.url) {\n                var requestUrl = NLP.Common.Utility.URLparse(exception.config.url);\n\n                errorTags.push(requestUrl.pathname);\n                error.message += ': ' + requestUrl.pathname;\n                if (requestUrl.search) {\n                    errorTags.push(requestUrl.search);\n                }\n            }\n        }\n\n        Raygun.send(error, customData, errorTags);\n    }\n\n\t/**\n\t * Extend the $exceptionHandler service to log an error with logger.\n\t * @param  {Object} $delegate\n\t * @param  {Object} $injector\n\t * @param  {Object} exceptionHandler\n\t * @param  {Object} logger\n\t * @return {Function} the decorated $exceptionHandler service\n\t */\n    function extendExceptionHandler($delegate, $injector, exceptionHandler, logger) {\n\n        var logException = function (exception, cause) {\n            if (angular.isDefined(Raygun)) {\n                sendToRaygun(exception, cause);\n            }\n            var appErrorPrefix = '';//exceptionHandler.config.appErrorPrefix || '';\n            var errorData = { exception: exception, cause: cause };\n            exception.message = appErrorPrefix + (angular.isDefined(exception.message) ? exception.message : exception.statusText);\n            $delegate(exception, cause);\n\n            if (angular.isDefined(exception.data) && exception.data != null && angular.isDefined(exception.data.exceptionMessage)) {\n                logger.error(exception.data.exceptionMessage, exception.data.stackTrace, exception.data.message);\n            }\n            else {\n                logger.error(exception.message, errorData);\n            }\n        };\n\n\t\treturn function (exception, cause) {\n\t\t\t//var $rootScope = $injector.get(\"$rootScope\");\n\n            if (exception && exception.config && exception.config.timeout) {\n                exception.config.timeout.then((value) => {\n                    if (value !== NLP.Common.Constants.NLP_REQUESTCANCELLEDLOGININPROGRESS) {\n                        logException(exception, cause);\n                    }\n                });\n            }\n\n            logException(exception, cause);\n\n\t\t};\n\t}\n}","module NLP.Services.ExceptionHandling {\n    'use strict';\n\n    export function serverErrorInterceptor($q, $injector, $exceptionHandler: ng.IExceptionHandlerService) {\n        return {\n            responseError: function (rejection) {\n                if (rejection.status >= 500 && rejection.status <= 599) {\n                    var ngNotify = $injector.get('ngNotify');\n                    $exceptionHandler(rejection, rejection.data.message || rejection.statusText);\n                    ngNotify.set('Oops, we\\'ve had a server error, please try again later.', 'error');\n                }\n\n                return $q.reject(rejection);\n            }\n        };\n    }\n\n    serverErrorInterceptor.$inject = ['$q', '$injector', '$exceptionHandler'];\n}","module NLP.Services.Notifications {\n    'use strict';\n\n    export interface INotifyConfiguration {\n        position?: string;\n        sticky?: boolean;\n        duration?: number;\n        theme?: string;\n        html?: boolean;\n        type?: string;\n    }\n\n    export interface INotify {\n        set(notification: string, type?: string|INotifyConfiguration): void;\n        dismiss():void;\n    }\n\n    export class Notify implements INotify {\n\n        $inject: string[] = ['ngNotify'];\n\n        constructor(private ngNotify) {\n        }\n\n        set(notification: string, type?: string|INotifyConfiguration): string {\n            return this.ngNotify.set(notification, type);\n        }\n\n        dismiss() {\n            this.ngNotify.dismiss();\n        }\n    }\n}","/// <reference path=\"logger.ts\" />\n/// <reference path=\"models.ts\" />\n/// <reference path=\"notifications/notify.ts\" />\n/// <reference path=\"authentication/accessdeniedinterceptor.ts\" />\n/// <reference path=\"clientpersistentstorage/nlpclientpersistentstorageprovider.ts\" />\n\nangular.module('nlp.services', ['nlp.config', 'angular-loading-bar'])\n    .factory('logger', NLP.Services.Logger)\n    .factory('accessDeniedInterceptor', NLP.Services.Authentication.accessDeniedInterceptor)\n\n    .service('CheckboxService', NLP.Services.CheckboxService)\n    .service('ReportService', NLP.Services.ReportService)\n\n    .service('Notify', NLP.Services.Notifications.Notify)\n    .provider('NLPClientPersistentStorage', NLP.Services.NLPClientPersistentStorageProvider);","/// <reference path=\"exceptionhandlerprovider.ts\" />\n/// <reference path=\"servererrorinterceptor.ts\" />\n\nangular.module('nlp.services.exceptionHandling', ['ngNotify', 'nlp.services', 'nlp.config'])\n    .provider('exceptionHandler', NLP.Services.ExceptionHandling.ExceptionHandlerProvider)\n    .factory('serverErrorInterceptor', NLP.Services.ExceptionHandling.serverErrorInterceptor)\n    .config(NLP.Services.ExceptionHandling.config);"]}